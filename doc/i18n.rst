====================
Internationalisation
====================

CKAN is used in many countries, and adding a new language is a simple process. 

Supported Languages
===================

CKAN already supports numerous languages. To check whether your language is supported, look in the source at ``ckan/i18n`` for translation files. Languages are named using two-letter ISO language codes (e.g. es, fr, de).

If your language is present, you can switch language simply by setting the ``lang`` option in your .ini file. For example, to switch to German::

 lang=de

If your language is not supported yet, the remainder of this section section provides instructions on how to prepare a translation file and add it to CKAN. 

Adding a New Language
=====================

Transifex Setup
---------------

Transifxes, the open translation platform, provides a simple web interface for writing translations and is widely used for CKAN internationalisation. 

Existing CKAN translation projects can be found at: http://www.transifex.net/projects/p/ckan/teams/

Using Transifex makes it easier to handle collaboration, with an online editor that makes the process more accessible.

Updated translations are automatically pushed to http://bitbucket.org/bboissin/ckan-i18n and these can be compiled and placed on CKAN servers by the server administrators.

Manual Setup
------------

If you prefer not to use Transifex, you can create translation files manually.

All the English strings in CKAN are extracted into the ``ckan.pot`` file, which can be found in ``ckan/i18n``.

NB: The pot file was created with the Babel command ``python setup.py extract_messages``.

0. Install babel
++++++++++++++++

You need Python's ``babel`` library (debian package ``python-pybabel``). Install it as follows with pip::

 pip -E pyenv install babel

1. Create a 'po' file for your language
+++++++++++++++++++++++++++++++++++++++

1. Grab the CKAN i18n repository using:
hg clone http://bitbucket.org/bboissin/ckan-i18n/

2. Create a translation file for your language (a po file) using the pot file::

 python setup.py init_catalog --locale YOUR_LANGUAGE

Replace "YOUR_LANGUAGE" with the two-letter ISO language code (e.g. es, fr, de).

In future, when the pot file becomes updated, you can update the strings in your po file, whilst preserving your po edits by doing::

 python setup.py update_catalog --locale YOUR-LANGUAGE

2. Do the translation
+++++++++++++++++++++

Edit the po file and translate the strings. For more information on how to do this, see: http://pylonsbook.com/en/1.1/internationalization-and-localization.html
It recommended to use a tool to help doing this, to check the syntax is correct. For example [[1]] (but also kbabel, poeditor, pootle, etc.). There are also extensions for editors such as emacs.
For examples of translations see:
German translation
French translation
[edit] Step Three: Commit the translation
When the po is complete, commit it to the CKAN i18n repo. NB Benoit needs to have given you the credentials before you can do this - email him on ckan-discuss.
hg add ckan/i18n/YOUR_LANGUAGE/LC_MESSAGES/ckan.po
hg ci -m '[i18n]: New language po added: YOUR_LANGUAGE' ckan/i18n/YOUR_LANGUAGE/LC_MESSAGES/ckan.po
hg push

2. Compile a translation
++++++++++++++++++++++++

Once you have created a translation (either with Transifex or manually) you can build the `po` into a `mo` file, ready for deployment. With either method of creating the po file, it should not be found in the CKAN i18n repository: ckan/i18n/YOUR_LANGUAGE/LC_MESSAGES/ckan.po
In this repo, compile the po file like this:
python setup.py compile_catalog --locale YOUR_LANGUAGE
Replace "YOUR_LANGUAGE" with your language short code, like: de, fr, es, ..
This will result in a binary 'mo' file of your translation:
ckan/i18n/YOUR_LANGUAGE/LC_MESSAGES/ckan.mo

Deploying a Translation
-----------------------

This requires you have
Get ssh access to relevant server (see http://wiki.okfn.org/wg/infrastructure )
You have a compiled translation file for your language: ckan.mo
Then for automated deployment to your host do (see options to config_0 if more configuration is needed e.g. of host or location):
fab config_0:hu.ckan.net upload_i18n:hu
Alternatively, if you do not want to use fab, you can just scp. The following assumes a standard layout on the server (you may want to ssh and check before you upload!) and that you are deploying to hu.ckan.net for language "hu":
scp ckan.mo /home/okfn/var/srvc/hu.ckan.net/pyenv/src/ckan/ckan/i18n/hu/LC_MESSAGES/ckan.mo
Once the mo file is in place (by either method) then you can switch between the installed languages using 'lang' option in the CKAN config (ini) file. CKAN then needs to be restarted for it to take effect. More information about this in the CKAN configuration docs.
[edit] Transifex administration

The Transifex workflow is as follows:
Install transifex command-line utilities
"tx init" in ckan to connect to Transifex
We run python setup.py extract_messages on the CKAN source
Upload the local .pot file via command-line "tx push"
Get people to complete translations on Transifex
Pull locale .po files via "tx pull"
python setup.py compile_catalog
Commit & push po and mo files
